name: Auto Generate Blog Post

on:
  schedule:
    - cron: '0 8 * * 1'   # every Monday at 8 AM UTC
  workflow_dispatch:

jobs:
  generate_post:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Generate Blog Post Content
      id: generate_content
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        PROMPT="Write a detailed, engaging blog post about AI trends in 2025."
        MODEL_URL="https://api-inference.huggingface.co/models/gpt2"
        FALLBACK_URL="https://api-inference.huggingface.co/models/bigscience/bloom-560m"

        echo "Generating full blog post content..."
        HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$MODEL_URL" \
          -H "Authorization: Bearer $HF_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"inputs\":\"$PROMPT\",\"parameters\":{\"max_new_tokens\":400}}")

        if [ "$HTTP_CODE" -ne 200 ]; then
          echo "⚠️ Primary model failed with HTTP $HTTP_CODE. Falling back..."
          HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$FALLBACK_URL" \
            -H "Authorization: Bearer $HF_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"inputs\":\"$PROMPT\",\"parameters\":{\"max_new_tokens\":400}}")
        fi

        if [ "$HTTP_CODE" -ne 200 ]; then
          echo "❌ Both models failed with HTTP $HTTP_CODE"
          cat response.json
          exit 1
        fi

        CONTENT=$(jq -r '.[0].generated_text // .[0].output_text // empty' response.json)

        if [ -z "$CONTENT" ]; then
          echo "❌ No valid text found in model output."
          cat response.json
          exit 1
        fi

        echo "::set-output name=content::$CONTENT"

    - name: Generate Summary from Content
      id: generate_summary
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        CONTENT="${{ steps.generate_content.outputs.content }}"
        SUMMARY_PROMPT="Summarize the following blog post in 2 sentences:\n\n$CONTENT"
        MODEL_URL="https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
        FALLBACK_URL="https://api-inference.huggingface.co/models/google/flan-t5-large"

        echo "Generating summary..."
        HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$MODEL_URL" \
          -H "Authorization: Bearer $HF_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"inputs\":\"$SUMMARY_PROMPT\",\"parameters\":{\"max_new_tokens\":100}}")

        if [ "$HTTP_CODE" -ne 200 ]; then
          echo "⚠️ Primary model failed with HTTP $HTTP_CODE. Falling back..."
          HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$FALLBACK_URL" \
            -H "Authorization: Bearer $HF_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"inputs\":\"$SUMMARY_PROMPT\",\"parameters\":{\"max_new_tokens\":100}}")
        fi

        if [ "$HTTP_CODE" -ne 200 ]; then
          echo "❌ Both models failed with HTTP $HTTP_CODE"
          cat response.json
          exit 1
        fi

        SUMMARY=$(jq -r '.[0].generated_text // .[0].output_text // empty' response.json)

        if [ -z "$SUMMARY" ]; then
          echo "❌ No valid text found in summary output."
          cat response.json
          exit 1
        fi

        echo "::set-output name=summary::$SUMMARY"

    - name: Create new post and update posts.json
      run: |
        CONTENT="${{ steps.generate_content.outputs.content }}"
        SUMMARY="${{ steps.generate_summary.outputs.summary }}"

        TITLE="AI Trends in 2025"
        SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9-]//g')
        DATE=$(date -I)
        URL="https://axspireai.com/blog/$SLUG"

        NEW_POST=$(jq -n \
          --arg id "$SLUG" \
          --arg title "$TITLE" \
          --arg description "$SUMMARY" \
          --arg content "$CONTENT" \
          --arg date "$DATE" \
          --arg url "$URL" \
          '{id: $id, title: $title, description: $description, content: $content, date: $date, url: $url}')

        if [ ! -f posts.json ]; then
          echo "[]" > posts.json
        fi

        jq ". += [$NEW_POST]" posts.json > posts_tmp.json && mv posts_tmp.json posts.json
        echo "Updated posts.json:"
        cat posts.json

    - name: Commit and push changes
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add posts.json

        if git diff --cached --quiet; then
          echo "No changes to commit, skipping push"
        else
          git commit -m "Auto add blog post generated by Hugging Face"
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git HEAD:main
        fi
