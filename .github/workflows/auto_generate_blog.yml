name: Auto Generate Blog Post

on:
  schedule:
    - cron: '0 8 * * 1'   # every Monday at 8 AM UTC
  workflow_dispatch:      # manual trigger option

jobs:
  generate_post:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: main          # ensure we work on main branch
        fetch-depth: 0     # get full history so we can push
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Generate Blog Post Content
      id: generate_content
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        PROMPT="Write a detailed, engaging blog post about AI trends in 2025."

        echo "Generating full blog post content..."
        RESPONSE=$(curl -s -X POST https://api-inference.huggingface.co/models/gpt2 \
          -H "Authorization: Bearer $HF_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"inputs\":\"$PROMPT\",\"parameters\":{\"max_length\":400}}")

        echo "API response for content:"
        echo "$RESPONSE"

        CONTENT=$(echo "$RESPONSE" | jq -r 'if type=="array" then .[0].generated_text else .error end')

        if [[ "$CONTENT" == *"error"* ]]; then
          echo "Error from Hugging Face API: $CONTENT"
          exit 1
        fi

        echo "content=$CONTENT" >> $GITHUB_OUTPUT

    - name: Generate Summary from Content
      id: generate_summary
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        CONTENT="${{ steps.generate_content.outputs.content }}"

        SUMMARY_PROMPT="Summarize the following blog post in 2 sentences:\n\n$CONTENT"

        echo "Generating summary..."
        RESPONSE=$(curl -s -X POST https://api-inference.huggingface.co/models/gpt2 \
          -H "Authorization: Bearer $HF_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"inputs\":\"$SUMMARY_PROMPT\",\"parameters\":{\"max_length\":100}}")

        echo "API response for summary:"
        echo "$RESPONSE"

        SUMMARY=$(echo "$RESPONSE" | jq -r 'if type=="array" then .[0].generated_text else .error end')

        if [[ "$SUMMARY" == *"error"* ]]; then
          echo "Error from Hugging Face API (summary): $SUMMARY"
          exit 1
        fi

        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

    - name: Create new post and update posts.json
      run: |
        CONTENT="${{ steps.generate_content.outputs.content }}"
        SUMMARY="${{ steps.generate_summary.outputs.summary }}"
        TITLE="AI Trends in 2025"

        SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9-]//g')
        DATE=$(date -I)
        URL="https://axspireai.com/blog/$SLUG"

        NEW_POST=$(jq -n \
          --arg id "$SLUG" \
          --arg title "$TITLE" \
          --arg description "$SUMMARY" \
          --arg content "$CONTENT" \
          --arg date "$DATE" \
          --arg url "$URL" \
          '{id: $id, title: $title, description: $description, content: $content, date: $date, url: $url}')

        if [ ! -f posts.json ]; then
          echo "[]" > posts.json
        fi

        jq ". += [$NEW_POST]" posts.json > posts_tmp.json && mv posts_tmp.json posts.json

        echo "Updated posts.json:"
        cat posts.json

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git fetch origin $BRANCH_NAME
        git checkout $BRANCH_NAME

        git add posts.json

        if git diff --cached --quiet; then
          echo "No changes to commit, skipping push"
        else
          git commit -m "Auto add blog post generated by Hugging Face"
          git pull --rebase origin $BRANCH_NAME
          git push origin HEAD:$BRANCH_NAME
        fi
